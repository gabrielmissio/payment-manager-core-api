service: payment-manager-core

custom:
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    host: 0.0.0.0

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  lambdaHashingVersion: 20201221
  environment:
    NODE_ENV: ${opt:stage, 'dev'}
    REGION: ${opt:region, 'localhost'}
    PAYMENT_MANAGER_TABLE_NAME: ${ssm:/payment-manager/${opt:stage, 'dev'}/dynamoDB/paymanet-manager-table/name}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - 'dynamodb:*'
          Resource:
            - ${ssm:/payment-manager/${opt:stage, 'dev'}/dynamoDB/paymanet-manager-table/arn}
        - Effect: Allow
          Action:
            - 'dynamodb:*'
          Resource:
            - ${ssm:/payment-manager/${opt:stage, 'dev'}/dynamoDB/paymanet-manager-table/arn}/index/*

plugins:
  - serverless-offline

package:
  patterns:
    - '!./**'
    - './node_modules/**'
    - './index-app.js'
    - './src/**'
    - '!./src/infra/migrations'

functions:
  app:
    handler: index-app.handler
    timeout: 6
    events:
      - http:
          cors: true
          method: POST
          path: '/customer'
          private: false
      - http:
          cors: true
          method: GET
          path: '/customer'
          private: false
      - http:
          cors: true
          method: GET
          path: '/customer/{customerId}/profile'
          private: false
      - http:
          cors: true
          method: PUT
          path: '/customer/{customerId}/profile'
          private: false
      - http:
          cors: true
          method: DELETE
          path: '/customer/{customerId}/profile'
          private: false
      - http:
          cors: true
          method: GET
          path: '/customer/{customerId}/payments'
          private: false
      - http:
          cors: true
          method: POST
          path: '/customer/{customerId}/payments'
          private: false
